name: Frontend tests

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  GCP_SA_KEY: ${{secrets.GCP_SA_KEY }}

jobs:
  frontend-unit-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Execute unit tests
        run: npm test
        working-directory: frontend

  CloudBuild-docker-img:
    needs: frontend-unit-tests # Ensure tests pass before building
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Authenticating to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Trigger Cloud Build to run the Packer script
      - name: Build docker image
        run:  gcloud builds submit --config cloudbuild.yaml
        working-directory: frontend
          

     # Job for Google Cloud Build and Packer
  CloudBuild-packer-img:
    needs: CloudBuild-docker-img  # Ensure tests pass before building
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Authenticating to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Authenticate Docker with Google Cloud Registry
      - name: Authenticate Docker to Google Container Registry
        run: gcloud auth configure-docker

      # Trigger Cloud Build to run the Packer script
      - name: Run Cloud Build for Packer
        run: |
          gcloud builds submit --config packer-image/cloudbuild_packer_vm_img.yaml


  terraform-deploy:
    needs: CloudBuild-docker-img  # Ensure tests pass before building
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Authenticating to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Authenticate Docker with Google Cloud Registry
      - name: Authenticate Docker to Google Container Registry
        run: gcloud auth configure-docker

      # Trigger Cloud Build to run the Packer script
      - name: deploy with terraform
        run: |
          cd terraform-deployments
          terraform init && terraform apply -auto-approve
          
